import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

class LCATest {

	@Test
	void findLowestCATest() {
		BT bt = new BT();
		bt.insert(7);
		bt.insert(5);
		bt.insert(3);
		bt.insert(1);
		bt.insert(4);
		bt.insert(6);
		bt.insert(9);
		bt.insert(8);
		bt.insert(12);
		bt.insert(11);
		bt.insert(13);

		/*			    7
		 * 			 /    \
		 *          5       9
		 *        /   \   /   \
		 *      3      6 8     12
		 *    /   \           /   \
		 *  1      4        11     13
		 *  This is the tree generated by the above code
		 */

		LCA lca = new LCA(3, 6, bt);
		assertEquals(5, lca.findLowestCommonAncestor());

		lca = new LCA(1, 4, bt);
		assertEquals(3, lca.findLowestCommonAncestor());

		lca = new LCA(5, 9, bt);
		assertEquals(7, lca.findLowestCommonAncestor());
	}

	// Ensure that when a Binary Tree is created but with
	// no values added, it is null
	@Test
	void nullBinaryTree() {
		BT nullBT = new BT();
		assertNull(nullBT.root);
	}

}
