import static org.junit.Assert.assertNull;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

import jdk.internal.jline.internal.TestAccessible;

class LCATest {

	@Test
	void findLowestCATest() {
		BT bt = new BT();
		bt.insert(7);
		bt.insert(5);
		bt.insert(3);
		bt.insert(1);
		bt.insert(4);
		bt.insert(6);
		bt.insert(9);
		bt.insert(8);
		bt.insert(12);
		bt.insert(11);
		bt.insert(13);

		/*			 			   7
		 * 			 			/    \
		 *          5       9
		 *        /   \   /   \
		 *      3      6 8     12
		 *    /   \           /   \
		 *  1      4        11     13
		 *  This is the tree generated by the above code
		 */

		LCA lca = new LCA(3, 6, bt);
		assertEquals(5, lca.findLowestCommonAncestor());

		lca = new LCA(1, 4, bt);
		assertEquals(3, lca.findLowestCommonAncestor());

		lca = new LCA(5, 9, bt);
		assertEquals(7, lca.findLowestCommonAncestor());
	}

	// Ensure that when a Binary Tree is created but with
	// no values added, it is null
	@Test
	void nullBinaryTree() {
		BT nullBT = new BT();
		assertNull(nullBT.root);
	}

	@Test
	void testBTInsert() {
		BT bt = new BT();
		bt.insert(7);
		assertEquals(7, bt.root.val);

		bt.insert(5);
		bt.insert(9);
		assertEquals(5, bt.root.left.val);
		assertEquals(9, bt.root.right.val);

		bt.insert(3);
		bt.insert(6);
		bt.insert(8);
		bt.insert(12);
		assertEquals(3, bt.root.left.left.val);
		assertEquals(6, bt.root.left.right.val);
		assertEquals(8, bt.root.right.left.val);
		assertEquals(12, bt.right.right.val);
	}

	@Test
	void testReturnLCA() {
		BT bt = new BT();
		bt.insert(7);
		bt.insert(5);
		bt.insert(3);
		bt.insert(1);
		bt.insert(4);
		bt.insert(6);
		bt.insert(9);
		bt.insert(8);
		bt.insert(12);
		bt.insert(11);
		bt.insert(13);

		/*			   			 7
		 * 			 			/    \
		 *          5       9
		 *        /   \   /   \
		 *      3      6 8     12
		 *    /   \           /   \
		 *  1      4        11     13
		 *  This is the tree generated by the above code
		 */

		 LCA lca = new LCA(5, 9, bt);
		 assertEquals(lca.findLowestCommonAncestor(), lca.returnLCA());
	}
	
	@Test
	void testNullDAGNode() {
		DAG.DAGNode node = null;
		assertNull(node);
	}

	@Test
	void testOneNodeDAG() {
		DAG.DAGNode root = new DAG.DAGNode(1);
		DAG.DAGNode node1 = new DAG.DAGNode(1);
		DAG.DAGNode node2 = new DAG.DAGNode(1);
		assertEquals(LCA.findLCADAG(root, node1, node2).val, 1);
	}

	@Test
	void testDAG() {
		DAG.DAGNode root = new DAG.DAGNode(1);
        DAG.DAGNode a = new DAG.DAGNode(2);
        DAG.DAGNode b = new DAG.DAGNode(3);
        DAG.DAGNode c = new DAG.DAGNode(4);
        DAG.DAGNode d = new DAG.DAGNode(5);

        // The below test ought to return null as all values provided are null
        assertNull(LCA.findLCADAG(null, null, null));

        // The below test ought to return null as it's not possible to find the LCA of nodes
        // Not in the DAG
        assertNull(LCA.findLCADAG(root, new DAG.DAGNode(6), new DAG.DAGNode(7)));
        root.childList.add(a);
        root.childList.add(b);
        root.childList.add(c);
        root.childList.add(d);
        a.childList.add(c);
        a.parentList.add(root);
        b.childList.add(c);
        b.childList.add(d);
        b.parentList.add(root);
        c.childList.add(d);
        c.parentList.add(a);
        c.parentList.add(b);
        c.parentList.add(root);
        d.parentList.add(b);
        d.parentList.add(c);
        d.parentList.add(root);

        assertEquals(LCA.findLCADAG(root, root, b).val, 1);
        assertEquals(LCA.findLCADAG(root, d, d).val, 5);
        assertEquals(LCA.findLCADAG(root, a, d).val, 1);

	}
}
